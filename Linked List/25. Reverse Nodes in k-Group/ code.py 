# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseKGroup(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:
        dummy = ListNode(0,head)
        groupPre = dummy
        while True:
            kth = self.getKth(groupPre,k)
            if not kth:
                break
            groupNext = kth.next

            prev,current = kth.next, groupPre.next
            while current != groupNext:
                temp = current.next
                current.next = prev
                prev = current
                current = temp

            temp = groupPre.next
            groupPre.next = kth
            groupPre = temp

        return dummy.next


    def getKth(self, curr, k):
        while curr and k>0:
            curr = curr.next
            k -= 1
        return curr


